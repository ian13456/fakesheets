{"version":3,"sources":["hooks/useSheetData.js","containers/Controls.js","components/InvisibleInput.js","components/Cell.js","containers/Row.js","containers/Sheet.js","containers/App.js","index.js"],"names":["SheetDataContext","createContext","data","rows","columns","highlighted","focused","setCell","addRow","addColumn","addHighlight","removeHighlight","resetHighlight","setFocus","clearFocus","defaultData","i","DEFAULT_ROWS_COUNT","push","Array","DEFAULT_COLUMNS_COUNT","fill","clone","JSON","parse","stringify","alphabetToNumber","str","toLowerCase","split","reduce","r","a","parseInt","numberToAlphabet","number","asciiA","charCodeAt","range","s","String","fromCharCode","Math","floor","toUpperCase","getCellRep","c","parseCellRep","splitted","SheetDataProvider","props","useState","setData","setRows","setColumns","setHighlighted","setFocused","Provider","value","newData","fr","fc","splice","forEach","row","filter","rep","useSheetData","useContext","ControlsWrapper","styled","div","ControlButton","button","Controls","onClick","input","ORDINARY_BORDER","INDICATOR_BORDER","CellWrapper","p","isIndicator","isFocused","Cell","col","isInput","setIsInput","inputValue","setInputValue","isRowIndicator","isColIndicator","isCorner","content","saveInput","useEffect","tabIndex","onMouseDown","onDoubleClick","onKeyDown","e","key","InvisibleInput","autoFocus","onChange","target","onBlur","style","padding","RowWrapper","Row","map","cellData","SheetWrapper","Sheet","rowData","count","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83bf2e2e.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nexport const DEFAULT_ROWS_COUNT = 100;\nexport const DEFAULT_COLUMNS_COUNT = 26;\n\nexport const SheetDataContext = createContext({\n  data: [],\n  rows: 0,\n  columns: 0,\n\n  // interaction\n  highlighted: [],\n  focused: '',\n\n  // data mutation\n  setCell: () => {},\n  addRow: () => {},\n  addColumn: () => {},\n  addHighlight: () => {},\n  removeHighlight: () => {},\n  resetHighlight: () => {},\n  setFocus: () => {},\n  clearFocus: () => {},\n});\n\n// populate data with empty strings\n// plus one for the heading rows/columns\nconst defaultData = [];\nfor (let i = 0; i < DEFAULT_ROWS_COUNT + 1; i++) {\n  defaultData.push(new Array(DEFAULT_COLUMNS_COUNT + 1).fill(''));\n}\n\n// utility function\nconst clone = (data) => {\n  return JSON.parse(JSON.stringify(data));\n};\n\n// A => 1, AA => 27\nexport const alphabetToNumber = (str) => {\n  return (\n    str\n      .toLowerCase()\n      .split('')\n      .reduce((r, a) => r * 26 + parseInt(a, 36) - 9, 0) - 1\n  );\n};\n\nexport const numberToAlphabet = (number) => {\n  const asciiA = 'a'.charCodeAt(0);\n  const asciiZ = 'z'.charCodeAt(0);\n  const range = asciiZ - asciiA + 1;\n\n  let s = '';\n  while (number >= 0) {\n    s = String.fromCharCode((number % range) + asciiA) + s;\n    number = Math.floor(number / range) - 1;\n  }\n\n  return s.toUpperCase();\n};\n\nexport const getCellRep = (r, c) => {\n  return `${r}_${numberToAlphabet(c)}`;\n};\n\nexport const parseCellRep = (str) => {\n  if (!str) return [-1, -1]; // no focused\n  const splitted = str.split('_');\n  return [parseInt(splitted[0], 10), alphabetToNumber(splitted[1])];\n};\n\nexport const SheetDataProvider = (props) => {\n  const [data, setData] = useState(defaultData);\n  const [rows, setRows] = useState(DEFAULT_ROWS_COUNT + 1);\n  const [columns, setColumns] = useState(DEFAULT_COLUMNS_COUNT + 1);\n  const [highlighted, setHighlighted] = useState([]);\n  const [focused, setFocused] = useState('');\n\n  const setCell = (r, c, str) => {\n    // setting rows and columns as string\n    const newData = clone(data);\n    newData[r][c] = str;\n    setData(newData);\n  };\n\n  const addRow = () => {\n    const newData = clone(data);\n    const [r] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    const [fr, fc] = parseCellRep(focused);\n    if (fr >= r) setFocus(fr + 1, fc);\n\n    newData.splice(r, 0, new Array(columns).fill(''));\n    setData(newData);\n    setRows(rows + 1);\n  };\n\n  const addColumn = () => {\n    const newData = clone(data);\n    const [, c] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    const [fr, fc] = parseCellRep(focused);\n    if (fc >= c) setFocus(fr, fc + 1);\n\n    newData.forEach((row) => row.splice(c, 0, ''));\n    setData(newData);\n    setColumns(columns + 1);\n  };\n\n  const addHighlight = (r, c) => {\n    setHighlighted([...highlighted, getCellRep(r, c)]);\n  };\n\n  const removeHighlight = (r, c) => {\n    setHighlighted(highlighted.filter((rep) => rep !== getCellRep(r, c)));\n  };\n\n  const setFocus = (r, c) => {\n    setFocused(getCellRep(r, c));\n  };\n\n  const clearFocus = () => {\n    setFocused('');\n  };\n\n  return (\n    <SheetDataContext.Provider\n      value={{\n        data,\n        rows,\n        columns,\n        highlighted,\n        focused: parseCellRep(focused),\n        setCell,\n        addRow,\n        addColumn,\n        addHighlight,\n        removeHighlight,\n        setFocus,\n        clearFocus,\n      }}\n      {...props}\n    />\n  );\n};\n\nconst useSheetData = () => {\n  return useContext(SheetDataContext);\n};\n\nexport default useSheetData;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useSheetData from '../hooks/useSheetData';\n\nconst ControlsWrapper = styled.div`\n  position: fixed;\n  bottom: 4px;\n  right: 4px;\n  background: #f8f9fa;\n  padding: 4px;\n`;\n\nconst ControlButton = styled.button`\n  margin: 0 4px;\n  padding: 4px;\n  background: white;\n  border: none;\n  color: #666666;\n  font-size: 1em;\n  transition: background 0.2s linear;\n  cursor: pointer;\n  border-radius: 3px;\n\n  &:hover {\n    background: #eee;\n  }\n`;\n\nconst Controls = () => {\n  const { addRow, addColumn } = useSheetData();\n\n  return (\n    <ControlsWrapper>\n      <ControlButton onClick={addRow}>add row</ControlButton>\n      <ControlButton onClick={addColumn}>add column</ControlButton>\n    </ControlsWrapper>\n  );\n};\n\nexport default Controls;\n","import styled from 'styled-components';\n\nexport default styled.input`\n  background: transparent;\n  border: none;\n  width: 100%;\n  height: 100%;\n  font-size: inherit;\n  color: inherit;\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useSheetData, { numberToAlphabet } from '../hooks/useSheetData';\nimport InvisibleInput from './InvisibleInput';\n\nconst ORDINARY_BACKGROUND = '#FFFFFF';\nconst INDICATOR_BACKGROUND = '#F8F9FA';\nconst FOCUSED_BACKGROUND = '#77acf155';\n\nconst ORDINARY_BORDER = '#bbbbbb';\nconst INDICATOR_BORDER = '#999999';\n\nconst ORDINARY_COLOR = '#222222';\nconst INDICATOR_COLOR = '#666666';\n\nconst CellWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 6rem;\n  height: 1.6rem;\n  font-size: 0.8rem;\n  text-align: center;\n  vertical-align: middle;\n  overflow: hidden;\n\n  border-top: solid 1px\n    ${(p) => (p.isIndicator ? INDICATOR_BORDER : ORDINARY_BORDER)};\n  border-left: solid 1px\n    ${(p) => (p.isIndicator ? INDICATOR_BORDER : ORDINARY_BORDER)};\n  background: ${(p) =>\n    p.isFocused\n      ? FOCUSED_BACKGROUND\n      : p.isIndicator\n      ? INDICATOR_BACKGROUND\n      : ORDINARY_BACKGROUND};\n  color: ${(p) => (p.isIndicator ? INDICATOR_COLOR : ORDINARY_COLOR)};\n`;\n\nconst Cell = ({ data, row, col }) => {\n  const { focused, setFocus, setCell } = useSheetData();\n  const [isInput, setIsInput] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const [r, c] = focused;\n\n  const isRowIndicator = row === 0;\n  const isColIndicator = col === 0;\n  const isIndicator = isRowIndicator || isColIndicator;\n  const isCorner = isRowIndicator && isColIndicator;\n  const isFocused = r === row && c === col;\n\n  const content = isCorner\n    ? ''\n    : isIndicator\n    ? isRowIndicator\n      ? numberToAlphabet(col - 1)\n      : row\n    : data;\n\n  const saveInput = () => {\n    setCell(row, col, inputValue);\n    setInputValue('');\n    setIsInput(false);\n  };\n\n  useEffect(() => {\n    if (isInput) {\n      setInputValue(data);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isInput]);\n\n  return (\n    <CellWrapper\n      tabIndex=\"1\" // for key press events\n      onMouseDown={() => {\n        if (!isIndicator) setFocus(row, col);\n      }}\n      onDoubleClick={() => {\n        if (!isIndicator) setIsInput(true);\n      }}\n      onKeyDown={(e) => {\n        if (isInput) {\n          if (e.key === 'Enter') saveInput();\n        } else setIsInput(true);\n      }}\n      isCorner={isCorner}\n      isIndicator={isIndicator}\n      isFocused={isFocused}\n    >\n      {isInput ? (\n        <InvisibleInput\n          autoFocus={true}\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onBlur={saveInput}\n          style={{ padding: 2 }}\n        />\n      ) : (\n        content\n      )}\n    </CellWrapper>\n  );\n};\n\nexport default Cell;\n","import styled from 'styled-components';\nimport Cell from '../components/Cell';\n\nconst RowWrapper = styled.div`\n  display: flex;\n`;\n\nconst Row = ({ row, data }) => {\n  return (\n    <RowWrapper>\n      {data.map((cellData, i) => (\n        <Cell key={`${row}_${i}`} data={cellData} row={row} col={i} />\n      ))}\n    </RowWrapper>\n  );\n};\n\nexport default Row;\n","import styled from 'styled-components';\nimport useSheetData from '../hooks/useSheetData';\nimport Row from './Row';\n\nconst SheetWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  border-right: solid 1px black;\n  border-bottom: solid 1px black;\n`;\n\nconst Sheet = () => {\n  const { data, rows } = useSheetData();\n\n  return (\n    <SheetWrapper>\n      {data.map((rowData, i) => (\n        <Row row={i} count={rows} key={i + 'r'} data={rowData} />\n      ))}\n    </SheetWrapper>\n  );\n};\n\nexport default Sheet;\n","import Controls from './Controls';\nimport Sheet from './Sheet';\nimport { SheetDataProvider } from '../hooks/useSheetData';\n\nconst App = () => {\n  return (\n    <SheetDataProvider>\n      <Controls />\n      <Sheet />\n    </SheetDataProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}