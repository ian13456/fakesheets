{"version":3,"sources":["hooks/useSheetData.js","configs/index.js","containers/Controls.js","components/InvisibleInput.js","components/Cell.js","containers/Row.js","containers/Sheet.js","containers/App.js","index.js"],"names":["CELL_WIDTH_INDICATOR","CELL_HEIGHT","ROWS_CONTROL_WIDTH","ORDINARY_BORDER","INDICATOR_BORDER","SheetDataContext","createContext","data","rows","columns","highlighted","focused","setCell","addRow","removeRow","addColumn","removeColumn","addHighlight","removeHighlight","resetHighlight","setFocus","clearFocus","defaultData","i","DEFAULT_ROWS_COUNT","push","Array","DEFAULT_COLUMNS_COUNT","fill","clone","JSON","parse","stringify","alphabetToNumber","str","toLowerCase","split","reduce","r","a","parseInt","numberToAlphabet","number","asciiA","charCodeAt","range","s","String","fromCharCode","Math","floor","toUpperCase","getCellRep","c","parseCellRep","splitted","SheetDataProvider","props","useState","setData","setHighlighted","setFocused","length","force","Provider","value","newData","splice","forEach","row","filter","rep","useSheetData","useContext","ControlsWrapper","styled","div","RowsControlsWrapper","ColumnsControlsWrapper","ControlButton","button","Controls","onClick","input","CellWrapper","p","isColIndicator","isCorner","isIndicator","isFocused","Cell","col","wrapperRef","useRef","isInput","setIsInput","inputValue","setInputValue","isRowIndicator","content","saveInput","startEditing","useEffect","current","focus","ref","tabIndex","onMouseDown","onDoubleClick","console","log","onKeyDown","e","key","InvisibleInput","autoFocus","onChange","target","onBlur","style","padding","RowWrapper","Row","map","cellData","SheetWrapper","Sheet","rowData","count","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6178ef6f.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nexport const DEFAULT_ROWS_COUNT = 100;\nexport const DEFAULT_COLUMNS_COUNT = 26;\n\nexport const SheetDataContext = createContext({\n  data: [],\n  rows: 0,\n  columns: 0,\n\n  // interaction\n  highlighted: [],\n  focused: '',\n\n  // data mutation\n  setCell: () => {},\n  addRow: () => {},\n  removeRow: () => {},\n  addColumn: () => {},\n  removeColumn: () => {},\n  addHighlight: () => {},\n  removeHighlight: () => {},\n  resetHighlight: () => {},\n  setFocus: () => {},\n  clearFocus: () => {},\n});\n\n// populate data with empty strings\n// plus one for the heading rows/columns\nconst defaultData = [];\nfor (let i = 0; i < DEFAULT_ROWS_COUNT + 1; i++) {\n  defaultData.push(new Array(DEFAULT_COLUMNS_COUNT + 1).fill(''));\n}\n\n// utility function\nconst clone = (data) => {\n  return JSON.parse(JSON.stringify(data));\n};\n\n// A => 1, AA => 27\nexport const alphabetToNumber = (str) => {\n  return (\n    str\n      .toLowerCase()\n      .split('')\n      .reduce((r, a) => r * 26 + parseInt(a, 36) - 9, 0) - 1\n  );\n};\n\nexport const numberToAlphabet = (number) => {\n  const asciiA = 'a'.charCodeAt(0);\n  const asciiZ = 'z'.charCodeAt(0);\n  const range = asciiZ - asciiA + 1;\n\n  let s = '';\n  while (number >= 0) {\n    s = String.fromCharCode((number % range) + asciiA) + s;\n    number = Math.floor(number / range) - 1;\n  }\n\n  return s.toUpperCase();\n};\n\nexport const getCellRep = (r, c) => {\n  return `${r}_${numberToAlphabet(c)}`;\n};\n\nexport const parseCellRep = (str) => {\n  if (!str) return [-1, -1]; // no focused\n  const splitted = str.split('_');\n  return [parseInt(splitted[0], 10), alphabetToNumber(splitted[1])];\n};\n\nexport const SheetDataProvider = (props) => {\n  const [data, setData] = useState(defaultData);\n  const [highlighted, setHighlighted] = useState([]);\n  const [focused, setFocused] = useState('');\n\n  const rows = data.length;\n  const columns = (data[0] || []).length;\n\n  const setCell = (r, c, str) => {\n    // setting rows and columns as string\n    const newData = clone(data);\n    newData[r][c] = str;\n    setData(newData);\n  };\n\n  const addRow = () => {\n    const newData = clone(data);\n    const [r, c] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    newData.splice(r, 0, new Array(columns).fill(''));\n    setData(newData);\n    setFocus(r + 1, c, true);\n  };\n\n  const removeRow = () => {\n    const newData = clone(data);\n    const [r, c] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    newData.splice(r, 1);\n    setData(newData);\n    setFocus(r - 1, c);\n  };\n\n  const addColumn = () => {\n    const newData = clone(data);\n    const [r, c] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    newData.forEach((row) => row.splice(c, 0, ''));\n    setData(newData);\n    setFocus(r, c + 1, true);\n  };\n\n  const removeColumn = () => {\n    const newData = clone(data);\n    const [r, c] = parseCellRep(focused || highlighted[0] || 'AAAAA_100000');\n\n    newData.forEach((row) => row.splice(c, 1));\n    setData(newData);\n    setFocus(r, c - 1);\n  };\n\n  const addHighlight = (r, c) => {\n    setHighlighted([...highlighted, getCellRep(r, c)]);\n  };\n\n  const removeHighlight = (r, c) => {\n    setHighlighted(highlighted.filter((rep) => rep !== getCellRep(r, c)));\n  };\n\n  const setFocus = (r, c, force = false) => {\n    if (!force) {\n      if (r < 1 || r >= rows) return;\n      if (c < 1 || c >= columns) return;\n    }\n    setFocused(getCellRep(r, c));\n  };\n\n  const clearFocus = () => {\n    setFocused('');\n  };\n\n  return (\n    <SheetDataContext.Provider\n      value={{\n        data,\n        rows,\n        columns,\n        highlighted,\n        focused: parseCellRep(focused),\n        setCell,\n        addRow,\n        removeRow,\n        addColumn,\n        removeColumn,\n        addHighlight,\n        removeHighlight,\n        setFocus,\n        clearFocus,\n      }}\n      {...props}\n    />\n  );\n};\n\nconst useSheetData = () => {\n  return useContext(SheetDataContext);\n};\n\nexport default useSheetData;\n","export const CELL_WIDTH = '6rem';\nexport const CELL_WIDTH_INDICATOR = '4rem';\nexport const CELL_HEIGHT = '1.6rem';\nexport const ROWS_CONTROL_WIDTH = '2rem';\n\nexport const ORDINARY_BACKGROUND = '#FFFFFF';\nexport const INDICATOR_BACKGROUND = '#F8F9FA';\nexport const FOCUSED_BACKGROUND = '#e4fbff';\n\nexport const ORDINARY_BORDER = '#bbbbbb';\nexport const INDICATOR_BORDER = '#999999';\n\nexport const ORDINARY_COLOR = '#222222';\nexport const INDICATOR_COLOR = '#666666';\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  CELL_HEIGHT,\n  CELL_WIDTH_INDICATOR,\n  ROWS_CONTROL_WIDTH,\n} from '../configs';\nimport useSheetData from '../hooks/useSheetData';\n\nconst ControlsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  left: 0;\n  top: 0;\n`;\n\nconst RowsControlsWrapper = styled(ControlsWrapper)`\n  margin-left: calc(${ROWS_CONTROL_WIDTH} + ${CELL_WIDTH_INDICATOR});\n  height: ${ROWS_CONTROL_WIDTH};\n\n  & button {\n    height: 100%;\n    width: 40px;\n    border: 2px solid #bbb;\n    border-top-width: 1px;\n    border-bottom-width: 1px;\n  }\n`;\n\nconst ColumnsControlsWrapper = styled(ControlsWrapper)`\n  flex-direction: column;\n  margin-top: calc(${ROWS_CONTROL_WIDTH} + ${CELL_HEIGHT});\n  width: ${ROWS_CONTROL_WIDTH};\n\n  & button {\n    width: 100%;\n    height: 40px;\n    border: 2px solid #bbb;\n    border-left-width: 1px;\n    border-right-width: 1px;\n  }\n`;\n\nconst ControlButton = styled.button`\n  background: white;\n  border: none;\n  color: #666666;\n  font-size: 1em;\n  transition: background 0.2s linear;\n  cursor: pointer;\n\n  &:hover {\n    background: #eee;\n  }\n`;\n\nconst Controls = () => {\n  const { addRow, removeRow, addColumn, removeColumn } = useSheetData();\n\n  return (\n    <>\n      <RowsControlsWrapper>\n        <ControlButton onClick={addRow}>+</ControlButton>\n        <ControlButton onClick={removeRow}>-</ControlButton>\n      </RowsControlsWrapper>\n      <ColumnsControlsWrapper>\n        <ControlButton onClick={addColumn}>+</ControlButton>\n        <ControlButton onClick={removeColumn}>-</ControlButton>\n      </ColumnsControlsWrapper>\n    </>\n  );\n};\n\nexport default Controls;\n","import styled from 'styled-components';\n\nexport default styled.input`\n  background: transparent;\n  border: none;\n  width: 100%;\n  height: 100%;\n  font-size: inherit;\n  color: inherit;\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  CELL_HEIGHT,\n  CELL_WIDTH,\n  CELL_WIDTH_INDICATOR,\n  FOCUSED_BACKGROUND,\n  INDICATOR_BACKGROUND,\n  INDICATOR_BORDER,\n  INDICATOR_COLOR,\n  ORDINARY_BACKGROUND,\n  ORDINARY_BORDER,\n  ORDINARY_COLOR,\n} from '../configs';\nimport useSheetData, { numberToAlphabet } from '../hooks/useSheetData';\nimport InvisibleInput from './InvisibleInput';\n\nconst CellWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: ${(p) => (p.isColIndicator ? CELL_WIDTH_INDICATOR : CELL_WIDTH)};\n  height: ${CELL_HEIGHT};\n  font-size: 0.8rem;\n  text-align: center;\n  vertical-align: middle;\n  overflow: hidden;\n  outline: none;\n\n  border-bottom: ${(p) => (p.isCorner ? '3px solid #aaa' : '')};\n  border-right: ${(p) => (p.isCorner ? '3px solid #aaa' : '')};\n  border-top: solid 1px\n    ${(p) => (p.isIndicator ? INDICATOR_BORDER : ORDINARY_BORDER)};\n  border-left: solid 1px\n    ${(p) => (p.isIndicator ? INDICATOR_BORDER : ORDINARY_BORDER)};\n  background: ${(p) =>\n    p.isFocused\n      ? FOCUSED_BACKGROUND\n      : p.isIndicator\n      ? INDICATOR_BACKGROUND\n      : ORDINARY_BACKGROUND};\n  color: ${(p) => (p.isIndicator ? INDICATOR_COLOR : ORDINARY_COLOR)};\n`;\n\nconst Cell = ({ data, row, col }) => {\n  const wrapperRef = useRef(null);\n  const { focused, setFocus, setCell } = useSheetData();\n  const [isInput, setIsInput] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const [r, c] = focused;\n\n  const isRowIndicator = row === 0;\n  const isColIndicator = col === 0;\n  const isIndicator = isRowIndicator || isColIndicator;\n  const isCorner = isRowIndicator && isColIndicator;\n  const isFocused = r === row && c === col;\n\n  const content = isCorner\n    ? ''\n    : isIndicator\n    ? isRowIndicator\n      ? numberToAlphabet(col - 1)\n      : row\n    : data;\n\n  const saveInput = () => {\n    setCell(row, col, inputValue);\n    setInputValue('');\n    setIsInput(false);\n  };\n\n  const startEditing = (value) => {\n    setIsInput(true);\n    setInputValue(value);\n  };\n\n  useEffect(() => {\n    if (wrapperRef.current && isFocused) {\n      wrapperRef.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFocused]);\n\n  return (\n    <CellWrapper\n      ref={wrapperRef}\n      tabIndex={isFocused ? '-1' : '0'} // for key press events\n      onMouseDown={() => {\n        if (!isIndicator) setFocus(row, col);\n      }}\n      onDoubleClick={() => {\n        if (!isIndicator) {\n          console.log(row, col);\n          setFocus(row, col);\n          startEditing(data);\n        }\n      }}\n      onKeyDown={(e) => {\n        if (isInput) {\n          if (e.key === 'Enter') {\n            saveInput();\n            setFocus(row + 1, col);\n          }\n        } else {\n          switch (e.key) {\n            case 'ArrowUp':\n              setFocus(row - 1, col);\n              break;\n            case 'ArrowDown':\n              setFocus(row + 1, col);\n              break;\n            case 'ArrowLeft':\n              setFocus(row, col - 1);\n              break;\n            case 'ArrowRight':\n              setFocus(row, col + 1);\n              break;\n            case 'Enter':\n              startEditing(data);\n              break;\n            default:\n              startEditing('');\n              break;\n          }\n        }\n      }}\n      isCorner={isCorner}\n      isColIndicator={isColIndicator}\n      isIndicator={isIndicator}\n      isFocused={isFocused}\n    >\n      {isInput ? (\n        <InvisibleInput\n          autoFocus={true}\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onBlur={saveInput}\n          style={{ padding: 2 }}\n        />\n      ) : (\n        content\n      )}\n    </CellWrapper>\n  );\n};\n\nexport default Cell;\n","import styled from 'styled-components';\nimport Cell from '../components/Cell';\n\nconst RowWrapper = styled.div`\n  display: flex;\n`;\n\nconst Row = ({ row, data }) => {\n  return (\n    <RowWrapper>\n      {data.map((cellData, i) => (\n        <Cell key={`${row}_${i}`} data={cellData} row={row} col={i} />\n      ))}\n    </RowWrapper>\n  );\n};\n\nexport default Row;\n","import styled from 'styled-components';\nimport { ROWS_CONTROL_WIDTH } from '../configs';\nimport useSheetData from '../hooks/useSheetData';\nimport Row from './Row';\n\nconst SheetWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n  border: solid 1px #555;\n  margin-left: ${ROWS_CONTROL_WIDTH};\n  margin-top: ${ROWS_CONTROL_WIDTH};\n`;\n\nconst Sheet = () => {\n  const { data, rows } = useSheetData();\n\n  return (\n    <SheetWrapper>\n      {data.map((rowData, i) => (\n        <Row row={i} count={rows} key={i + 'r'} data={rowData} />\n      ))}\n    </SheetWrapper>\n  );\n};\n\nexport default Sheet;\n","import Controls from './Controls';\nimport Sheet from './Sheet';\nimport { SheetDataProvider } from '../hooks/useSheetData';\n\nconst App = () => {\n  return (\n    <SheetDataProvider>\n      <Controls />\n      <Sheet />\n    </SheetDataProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}